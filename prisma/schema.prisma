datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  username  String   @db.VarChar(255)
  password  String   @db.VarChar(255)

  @@map("users")
}

model Product {
  id                 Int              @id @default(autoincrement())
  title              String           @unique @db.VarChar(255)
  brand              String?          @db.VarChar(255)
  category           String?          @db.VarChar(255)
  price              Decimal          @default(0.00) @db.Money
  discountPercentage Decimal?         @default(0.00) @db.Decimal(5, 2)
  rating             Decimal?         @db.Decimal(3, 2)
  stock              Int              @default(0)
  description        String?          @db.VarChar(255)
  thumbnail          String?          @db.VarChar(255)
  images             String[]
  orders             ProductOnOrder[] // Order-Products = many-to-many

  @@map("products")
}

model Customer {
  id        Int     @id @default(autoincrement())
  firstName String  @db.VarChar(255)
  lastName  String  @db.VarChar(255)
  email     String  @unique
  address   String  @db.VarChar(255)
  orders    Order[] // Order-Customer = one-to-many

  @@map("customers")
}

model Order {
  id         Int              @id @default(autoincrement())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  products   ProductOnOrder[] // Order-Products = many-to-many
  // Order-Customer = one-to-many
  // When a customer is deleted, all their orders are also deleted
  customer   Customer         @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  customerId Int
  invoice    Invoice? // Order-Invoice = one-to-one

  @@map("orders")
}

model ProductOnOrder {
  order     Order   @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId Int
  quantity  Int     @default(1)

  @@id([orderId, productId])
}

model Invoice {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // Automatically set due date to 30 days (= 720 hours) from current date
  paymentDue DateTime @default(dbgenerated("(now() + '720:00:00'::interval)"))
  paid       Boolean  @default(false)
  idNumber   String?  @db.VarChar(255)
  // Order-Invoice = one-to-one
  // When an order is deleted, the corresponding invoice is also deleted
  order      Order    @relation(fields: [orderId], references: [id], onUpdate: SetDefault, onDelete: Cascade)
  orderId    Int      @unique

  @@map("invoices")
}
