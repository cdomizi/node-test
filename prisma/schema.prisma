datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id                 Int            @id @default(autoincrement())
  title              String         @unique @db.VarChar(255)
  brand              String?        @db.VarChar(255)
  category           String?        @db.VarChar(255)
  price              Decimal        @default(0.00) @db.Money
  discountPercentage Decimal?       @default(0.00) @db.Decimal(5, 2)
  rating             Decimal?       @db.Decimal(3, 2)
  stock              Int            @default(0)
  description        String?        @db.VarChar(255)
  thumbnail          String?        @db.VarChar(255)
  images             String[]
  // Order-Products = many-to-many
  orders             OrderProduct[]

  @@map("products")
}

model Customer {
  id        Int             @id @default(autoincrement())
  firstName String          @db.VarChar(255)
  lastName  String          @db.VarChar(255)
  email     String          @unique
  address   String          @db.VarChar(255)
  // Order-Customer = one-to-many
  orders    OrderCustomer[]

  @@map("customers")
}

model Order {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  // Order-Products = many-to-many
  products  OrderProduct[]
  // Order-Customer = one-to-many
  customer  OrderCustomer?
  // Order-Invoice = one-to-one
  // On delete, the corresponding invoice is also deleted
  invoice   Invoice?       @relation(fields: [invoiceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  invoiceId Int            @unique

  @@map("orders")
}

model Invoice {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  paymentDue DateTime @default(dbgenerated("NOW() + INTERVAL '30 days'"))
  paid       Boolean  @default(false)
  idNumber   String?  @db.VarChar(255)
  // Order-Invoice = one-to-one
  order      Order?

  @@map("invoices")
}

model OrderCustomer {
  id         Int       @id @default(autoincrement())
  // If a customer is deleted, the corresponding orders are also deleted
  order      Order?    @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  // If an order is deleted, `orderId` for the corresponding orders is set to null
  customer   Customer? @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  orderId    Int?      @unique
  customerId Int?

  @@map("order_customer")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  // If a product is deleted, `productId` for the corresponding orders is set to null
  order     Order?   @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  // If an order is deleted, `orderId` for the corresponding products is set to null
  product   Product? @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  orderId   Int?
  productId Int?

  @@map("order_products")
}
